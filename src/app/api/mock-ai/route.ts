// src/app/api/mock-ai/route.ts - Simulation d'IA pour tester sans n8n
import { NextRequest, NextResponse } from 'next/server';

const AI_RESPONSES = [
  "Excellente id√©e ! Pour d√©velopper ce concept, pouvez-vous me parler du personnage principal ? Quel est son background et ses motivations ?",
  "C'est un d√©but prometteur ! Je sugg√®re d'ajouter plus de d√©tails sensoriels. Qu'est-ce que votre personnage voit, entend, ressent dans cette sc√®ne ?",
  "Tr√®s bien ! Pour enrichir cette partie, pensez au conflit. Quel obstacle votre h√©ros va-t-il rencontrer ? Comment cela va-t-il changer sa situation ?",
  "Parfait ! Maintenant, d√©veloppons l'univers. √Ä quelle √©poque se d√©roule votre histoire ? Dans quel lieu ? Comment ce contexte influence-t-il l'intrigue ?",
  "Bonne progression ! Pour le prochain chapitre, je recommande de cr√©er une tension dramatique. Que pourrait-il arriver pour surprendre le lecteur ?",
  "Magnifique travail ! Votre style s'am√©liore. Avez-vous pens√© √† la fin de votre livre ? Comment voulez-vous que cette histoire se termine ?",
  "Continuez comme √ßa ! Pour enrichir votre r√©cit, ajoutez quelques dialogues. Qu'est-ce que vos personnages se diraient dans cette situation ?",
  "Tr√®s cr√©atif ! Maintenant, pensons √† la structure. Combien de chapitres pr√©voyez-vous ? Quelle sera l'√©volution de votre intrigue ?",
];

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { bookId, message } = body;
    
    console.log('ü§ñ Mock IA re√ßu:', { bookId, message: message?.substring(0, 50) });
    
    if (!bookId || !message) {
      return NextResponse.json({ 
        error: 'bookId et message requis' 
      }, { status: 400 });
    }
    
    // Simuler un d√©lai d'IA
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Choisir une r√©ponse al√©atoire
    const randomResponse = AI_RESPONSES[Math.floor(Math.random() * AI_RESPONSES.length)];
    
    // Personnaliser la r√©ponse selon le message
    let aiResponse = randomResponse;
    
    if (message.toLowerCase().includes('bonjour') || message.toLowerCase().includes('salut')) {
      aiResponse = "Bonjour ! Je suis votre assistant d'√©criture. Je suis l√† pour vous aider √† d√©velopper votre livre. Sur quoi travaillons-nous aujourd'hui ?";
    } else if (message.toLowerCase().includes('help') || message.toLowerCase().includes('aide')) {
      aiResponse = "Je peux vous aider de plusieurs fa√ßons : d√©velopper vos personnages, enrichir vos descriptions, structurer votre intrigue, ou am√©liorer votre style. Que souhaitez-vous travailler ?";
    } else if (message.length < 10) {
      aiResponse = "J'aimerais en savoir plus ! Pouvez-vous d√©velopper votre id√©e ? Plus vous me donnez de d√©tails, mieux je peux vous aider.";
    }
    
    console.log('ü§ñ R√©ponse IA g√©n√©r√©e:', aiResponse.substring(0, 50));
    
    // Envoyer la r√©ponse √† notre webhook
    const webhookResponse = await fetch(`${process.env.NEXT_PUBLIC_APP_URL}/api/webhook/n8n`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        bookId,
        response: aiResponse,
        timestamp: new Date().toISOString(),
        source: 'mock-ai'
      })
    });
    
    const webhookResult = await webhookResponse.json();
    console.log('üì§ R√©ponse webhook:', webhookResult);
    
    return NextResponse.json({
      success: true,
      message: 'R√©ponse IA simul√©e envoy√©e',
      aiResponse: aiResponse.substring(0, 50) + '...',
      webhookStatus: webhookResponse.status
    });
    
  } catch (error) {
    console.error('‚ùå Erreur Mock IA:', error);
    return NextResponse.json({ 
      error: 'Erreur simulation IA',
      details: error instanceof Error ? error.message : 'Erreur inconnue'
    }, { status: 500 });
  }
}

export async function GET() {
  return NextResponse.json({
    status: 'Mock IA op√©rationnel',
    description: 'Endpoint de simulation d\'IA pour tester sans n8n',
    usage: {
      method: 'POST',
      payload: {
        bookId: 'string',
        message: 'string'
      }
    },
    responses: `${AI_RESPONSES.length} r√©ponses pr√©d√©finies disponibles`
  });
}