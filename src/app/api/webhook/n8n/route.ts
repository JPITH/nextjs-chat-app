// src/app/api/webhook/n8n/route.ts - Webhook corrig√©
import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    console.log('üì• Webhook n8n body complet:', JSON.stringify(body, null, 2));

    // n8n peut envoyer la r√©ponse de diff√©rentes fa√ßons
    const bookId = body.bookId;
    const aiResponse = body.response || body.message || body.aiResponse || body.content;

    console.log('üîç Donn√©es extraites:', { bookId, hasResponse: !!aiResponse });

    if (!bookId) {
      console.error('‚ùå bookId manquant');
      return NextResponse.json({ error: 'bookId requis' }, { status: 400 });
    }

    if (!aiResponse) {
      console.error('‚ùå R√©ponse IA manquante dans:', Object.keys(body));
      return NextResponse.json({ error: 'R√©ponse IA manquante' }, { status: 400 });
    }

    const supabase = await createClient();
    
    // V√©rifier si le livre existe
    const { data: book, error: bookError } = await supabase
      .from('books')
      .select('id')
      .eq('id', bookId)
      .single();

    if (bookError || !book) {
      console.error('‚ùå Livre non trouv√©:', bookId);
      return NextResponse.json({ error: 'Livre non trouv√©' }, { status: 404 });
    }

    // Sauvegarder la r√©ponse de l'assistant
    const assistantMessage = {
      book_id: bookId,
      title: 'R√©ponse Assistant',
      content: aiResponse.toString(),
    };

    console.log('üíæ Sauvegarde r√©ponse assistant:', assistantMessage.content.substring(0, 100) + '...');

    const { data: savedMessage, error: saveError } = await supabase
      .from('book_chat')
      .insert(assistantMessage)
      .select()
      .single();

    if (saveError) {
      console.error('‚ùå Erreur sauvegarde:', saveError);
      return NextResponse.json({ error: 'Erreur sauvegarde' }, { status: 500 });
    }

    console.log('‚úÖ R√©ponse assistant sauvegard√©e avec ID:', savedMessage.id);

    return NextResponse.json({
      success: true,
      messageId: savedMessage.id,
      message: 'R√©ponse IA sauvegard√©e avec succ√®s'
    });

  } catch (error: any) {
    console.error('‚ùå Erreur webhook:', error);
    return NextResponse.json({
      error: 'Erreur serveur',
      details: error.message
    }, { status: 500 });
  }
}